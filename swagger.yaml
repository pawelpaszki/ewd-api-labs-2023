openapi: 3.0.0
info:
  title: TMDB proxy API
  description: TMDB movies, tv series and people management API
  version: 0.1.0
tags:
  - name: actors
    description: TMDB actors related endpoints
  - name: tv series
    description: TMDB Tv series related endpoints
  - name: movies
    description: TMDB movies related endpoints
  - name: genres
    description: TMDB genres related endpoints
  - name: account
    description: Account related endpoints (account management, favourite collections, etc)
servers:
  - url: http://localhost:8080
    description: localhost
paths:

### Account endpoints
  /api/accounts:
    post:
      tags:
      - account
      description: Create an account
      operationId: createAccount
      requestBody:
        description: Account request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPayload'
            examples:
              AccountRequestExample:
                $ref: '#/components/examples/AccountRequestExample'
      responses:
        "201":
          description: Account successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPayload'
              examples:
                AccountCreationExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when creating an account
          content:
            application/json:
              examples:
                401AccountCreationExample:
                  $ref: '#/components/examples/401AccountCreationExample'
        "500":
          description: Unable to create an account
          content:
            application/json:
              examples:
                500AccountCreationExample:
                  $ref: '#/components/examples/500AccountCreationExample'
    get:
      tags:
      - account
      description: List accounts
      operationId: listAccounts
      responses:
        "200":
          description: Successfully list accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
              examples:
                AccountExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when creating an account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to create an account
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/accounts/{id}:
    parameters:
    - $ref: "#/components/parameters/id"
    get:
      tags:
      - account
      description: Get account by ID
      operationId: getAccount
      responses:
        "200":
          description: Successfully retrieve account by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                AccountExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when retrieving an account by ID
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to get an account
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
    put:
      tags:
      - account
      description: Update account by ID
      operationId: updateAccount
      requestBody:
        description: Account request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPayload'
            examples:
              AccountRequestExample:
                $ref: '#/components/examples/AccountRequestExample'
      responses:
        "200":
          description: Successfully updated account by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
              examples:
                AccountUpdateExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when retrieving an account by ID
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to get an account
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

  /api/accounts/security/token:
    post:
      tags:
      - account
      description: authenticate account
      operationId: authenticateAccount
      requestBody:
        description: email/ password combination
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationPayload'
            examples:
              AuthenticationPayloadExample:
                $ref: '#/components/examples/AuthenticationPayloadExample'
      responses:
        "200":
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityToken'
              examples:
                SecurityTokenExample:
                  $ref: '#/components/examples/SecurityTokenExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "500":
          description: Unable to authenticate account
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
  /api/accounts/{id}/favourite_movies:
    post:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: add favourite movie
      operationId: addFavouriteMovie
      requestBody:
        description: id of a resource to add to favourite movies
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceCreateBody'
            examples:
              AuthenticationPayloadExample:
                $ref: '#/components/examples/ResourceCreateBodyExample'
      responses:
        "200":
          description: Successfully added to favourite movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPayload'
              examples:
                AccountCreationExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to add to favourite movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
    get:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: get favourite movies
      operationId: getFavouriteMovies
      responses:
        "200":
          description: Successfully retrieved favourite movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteTmdbResources'
              examples:
                FavouriteMoviesExample:
                  $ref: '#/components/examples/FavouriteMoviesExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to get favourite movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
  /api/accounts/{id}/favourite_movies/{resource_id}:
    delete:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/resource_id"
      tags:
      - account
      description: delete from favourite movies
      operationId: deleteFromFavouriteMovies
      responses:
        "200":
          description: Successfully deleted favourite movie
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to delete from favourite movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'

  /api/accounts/{id}/favourite_tv:
    post:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: add favourite tv series
      operationId: addFavouriteTvSeries
      requestBody:
        description: id of a resource to add to favourite tv series
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceCreateBody'
            examples:
              AuthenticationPayloadExample:
                $ref: '#/components/examples/ResourceCreateBodyExample'
      responses:
        "200":
          description: Successfully added to favourite tv series
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPayload'
              examples:
                CreationExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to add to favourite tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
    get:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: get favourite tv series
      operationId: getFavouriteTvSeries
      responses:
        "200":
          description: Successfully retrieved favourite tv series
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteTmdbResources'
              examples:
                FavouriteTvSeriesExample:
                  $ref: '#/components/examples/FavouriteTvSeriesExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to get favourite tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
  /api/accounts/{id}/favourite_tv/{resource_id}:
    delete:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/resource_id"
      tags:
      - account
      description: delete from favourite tv series
      operationId: deleteFromFavouriteTvSeries
      responses:
        "200":
          description: Successfully deleted favourite tv series
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to delete from favourite tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'

  /api/accounts/{id}/favourite_actors:
    post:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: add favourite actor
      operationId: addFavouriteActor
      requestBody:
        description: id of a resource to add to favourite actors
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceCreateBody'
            examples:
              AuthenticationPayloadExample:
                $ref: '#/components/examples/ResourceCreateBodyExample'
      responses:
        "200":
          description: Successfully added to favourite actors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPayload'
              examples:
                CreationExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to add to favourite actors
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
    get:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: get favourite actors
      operationId: getFavouriteActors
      responses:
        "200":
          description: Successfully retrieved favourite actors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavouriteTmdbResources'
              examples:
                FavouriteActorsExample:
                  $ref: '#/components/examples/FavouriteActorsExample'
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to get favourite actors
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
  /api/accounts/{id}/favourite_actors/{resource_id}:
    delete:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/resource_id"
      tags:
      - account
      description: delete from favourite actors
      operationId: deleteFromFavouriteTvSeries
      responses:
        "200":
          description: Successfully deleted favourite actors
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to delete from favourite actors
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'

  /api/accounts/{id}/fantasy_movies:
    post:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: Create fantasy movie record
      operationId: createFantasyMovie
      requestBody:
        description: Fantasy movie request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FantasyMoviePayload'
            examples:
              FantasyMoviePayloadExample:
                $ref: '#/components/examples/FantasyMoviePayloadExample'
      responses:
        "201":
          description: Fantasy movie successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPayload'
              examples:
                CreationExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when creating an account
          content:
            application/json:
              examples:
                401AccountCreationExample:
                  $ref: '#/components/examples/401AccountCreationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404AccountNotFoundExample'
        "500":
          description: Unable to create fantasy movie
          content:
            application/json:
              examples:
                500AccountCreationExample:
                  $ref: '#/components/examples/GenericErrorExample'
    get:
      parameters:
      - $ref: "#/components/parameters/id"
      tags:
      - account
      description: List fantasy movies
      operationId: listFantasyMovies
      responses:
        "200":
          description: Successfully list fantasy movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FantasyMoviePayload'
              examples:
                ListExample:
                  $ref: '#/components/examples/FantasyMoviePayloadExample'
        "401":
          description: Validation error when attempting to list fantasy movies
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get fantasy movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/accounts/{id}/fantasy_movies/{movie_id}:
    delete:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/movie_id"
      tags:
      - account
      description: delete from fantasy movies
      operationId: deleteFromFantasyMovies
      responses:
        "200":
          description: Successfully deleted fantasy movie
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to delete from fantasy movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
    get:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/movie_id"
      tags:
      - account
      description: get fantasy movie
      operationId: getFantasyMovie
      responses:
        "200":
          description: Successfully retrieve fantasy movie
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FantasyMoviePayload'
              examples:
                SuccessfulGetExample:
                  $ref: '#/components/examples/FantasyMoviePayloadExample'
        "401":
          description: Validation error when attempting to get fantasy movie
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get fantasy movie
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
  /api/accounts/{id}/fantasy_movies/{movie_id}/cast:
    post:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/movie_id"
      tags:
      - account
      description: Create fantasy movie cast record
      operationId: createFantasyMovieCast
      requestBody:
        description: fantasy movie cast payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FantasyMovieCastPayload'
            examples:
              FantasyMovieCastPayloadExample:
                $ref: '#/components/examples/FantasyMovieCastPayloadExample'
      responses:
        "201":
          description: Fantasy movie cast member successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountPayload'
              examples:
                CastAdditionExample:
                  $ref: '#/components/examples/AccountCreationExample'
        "401":
          description: Validation error when adding cast to fantasy movie
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountCreationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to create fantasy movie cast
          content:
            application/json:
              examples:
                500Example:
                  $ref: '#/components/examples/GenericErrorExample'
  /api/accounts/{id}/fantasy_movies/{movie_id}/cast/{cast_id}:
    delete:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/id"
      - $ref: "#/components/parameters/resource_id"
      - $ref: "#/components/parameters/cast_id"
      tags:
      - account
      description: delete cast member from favourite movie
      operationId: deleteCastFromFavouriteMovies
      responses:
        "200":
          description: Successfully deleted cast member from favourite movie
        "401":
          description: Validation error when authenticating account
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountAuthenticationExample'
        "404":
          description: Account not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to delete member from favourite movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'

### Genres endpoints
  /api/genres:
    get:
      tags:
      - genres
      description: List genres
      operationId: listGenres
      responses:
        "200":
          description: Successfully list genres
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenreList'
              examples:
                GenreListExample:
                  $ref: '#/components/examples/GenreListExample'
        "401":
          description: Validation error when attempting to retrieve Genre
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list Genres
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/genres/{genre_id}:
    get:
      security:
      - BEARER: []
      parameters:
      - $ref: "#/components/parameters/genre_id"
      tags:
      - genres
      description: get genre by ID
      operationId: getGenre
      responses:
        "200":
          description: Successfully retrieve genre
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
              examples:
                GenreExample:
                  $ref: '#/components/examples/GenreExample'
        "401":
          description: Validation error when attempting to get genre
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Genre not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get genre
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'

### Movies endpoints
  /api/movies:
    get:
      tags:
      - movies
      parameters:
      - $ref: "#/components/parameters/query"
      description: List movies
      operationId: listMovies
      responses:
        "200":
          description: Successfully list Movies
          content:
            application/json:
              examples:
                MovieListExample:
                  $ref: '#/components/examples/MovieListExample'
        "401":
          description: Validation error when attempting to retrieve movies
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/movies/recommended:
    post:
      tags:
      - movies
      description: List recommended movies
      operationId: listRecommendedMovies
      requestBody:
        description: favourite movies used to determine recommended movies
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteMoviesPayload'
            examples:
              FavouriteMoviesPayloadExample:
                $ref: '#/components/examples/FavouriteMoviesPayloadExample'
      responses:
        "200":
          description: Successfully list recommended Movies
          content:
            application/json:
              examples:
                RecommendedMovieListExample:
                  $ref: '#/components/examples/RecommendedMovieListExample'
        "401":
          description: Validation error when attempting to retrieve recommended movies
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/movies/:resource_id:
    get:
      tags:
      - movies
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get movie
      operationId: getMovie
      responses:
        "200":
          description: Successfully retrieved movie by ID
          content:
            application/json:
              examples:
                MovieExample:
                  $ref: '#/components/examples/MovieExample'
        "401":
          description: Validation error when attempting to retrieve movies
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Movie not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get movie
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

  /api/movies/:resource_id/similar:
    get:
      tags:
      - movies
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get similar movies
      operationId: getSimilarMovies
      responses:
        "200":
          description: Successfully retrieved movies similar to movie by ID
          content:
            application/json:
              examples:
                MovieListExample:
                  $ref: '#/components/examples/MovieListExample'
        "401":
          description: Validation error when attempting to retrieve movies
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Movie not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to list similar movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []


  /api/movies/:resource_id/images:
    get:
      tags:
      - movies
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get movie images
      operationId: getMovieImages
      responses:
        "200":
          description: Successfully retrieved movie images
          content:
            application/json:
              examples:
                MovieImagesExample:
                  $ref: '#/components/examples/MovieImagesExample'
        "401":
          description: Validation error when attempting to retrieve movie images
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Movie not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get movie images
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

  /api/movies/:resource_id/reviews:
    get:
      tags:
      - movies
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get movie reviews
      operationId: getMovieReviews
      responses:
        "200":
          description: Successfully retrieved movie reviews
          content:
            application/json:
              examples:
                MovieReviewsExample:
                  $ref: '#/components/examples/MovieReviewsExample'
        "401":
          description: Validation error when attempting to retrieve movie reviews
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Movie not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get movie reviews
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

  /api/movies/upcoming:
    get:
      tags:
      - movies
      description: List upcoming movies
      operationId: listUpcomingMovies
      responses:
        "200":
          description: Successfully list upcoming movies
          content:
            application/json:
              examples:
                MovieListExample:
                  $ref: '#/components/examples/MovieListExample'
        "401":
          description: Validation error when attempting to retrieve upcoming movies
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list upcoming movies
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

### Tv series endpoints
  /api/tv:
    get:
      tags:
      - tv series
      parameters:
      - $ref: "#/components/parameters/query_tv"
      description: List tv series
      operationId: listTvSeries
      responses:
        "200":
          description: Successfully list tv series
          content:
            application/json:
              examples:
                TvSeriesListExample:
                  $ref: '#/components/examples/TvSeriesListExample'
        "401":
          description: Validation error when attempting to retrieve tv series
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/tv/recommended:
    post:
      tags:
      - tv series
      description: List recommended tv series
      operationId: listRecommendedTvSeries
      requestBody:
        description: favourite tv series used to determine recommended movies
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavouriteMoviesPayload'
            examples:
              FavouriteTvSeriesPayloadExample:
                $ref: '#/components/examples/FavouriteTvSeriesPayloadExample'
      responses:
        "200":
          description: Successfully list recommended tv series
          content:
            application/json:
              examples:
                MovieListExample:
                  $ref: '#/components/examples/RecommendedTvSeriesListExample'
        "401":
          description: Validation error when attempting to retrieve recommended tv series
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list recommended tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/tv/resource_id:
    get:
      tags:
      - tv series
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get tv series by ID
      operationId: getTvSeriesByID
      responses:
        "200":
          description: Successfully retrieved tv series by ID
          content:
            application/json:
              examples:
                TvSeriesExample:
                  $ref: '#/components/examples/TvSeriesExample'
        "401":
          description: Validation error when attempting to retrieve tv series
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Tv series not found
          content:
            application/json:
              examples:
                403Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/tv/:resource_id/similar:
    get:
      tags:
      - tv series
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get similar tv series
      operationId: getSimilarTvSeries
      responses:
        "200":
          description: Successfully retrieved tv series similar to tv series by ID
          content:
            application/json:
              examples:
                TvSeriesListExample:
                  $ref: '#/components/examples/TvSeriesListExample'
        "401":
          description: Validation error when attempting to retrieve tv series
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Tv series not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/TvSeriesImagesExample'
        "500":
          description: Unable to list similar tv series
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []


  /api/tv/:resource_id/images:
    get:
      tags:
      - tv series
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get tv series images
      operationId: getTvSeriesImages
      responses:
        "200":
          description: Successfully retrieved tv series images
          content:
            application/json:
              examples:
                TvSeriesImagesExample:
                  $ref: '#/components/examples/TvSeriesImagesExample'
        "401":
          description: Validation error when attempting to retrieve tv series images
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Tv series not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get tv series images
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

### Actors endpoints
  /api/actors:
    get:
      tags:
      - actors
      description: List popular people
      operationId: listActors
      responses:
        "200":
          description: Successfully list actors
          content:
            application/json:
              examples:
                ActorsListExample:
                  $ref: '#/components/examples/ActorsListExample'
        "401":
          description: Validation error when attempting to retrieve actors
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to list actors
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/actors/search:
    get:
      tags:
      - actors
      parameters:
      - $ref: "#/components/parameters/query_actors"
      description: Search popular people
      operationId: searchActors
      responses:
        "200":
          description: Successfully list actors search result
          content:
            application/json:
              examples:
                ActorsSearchExample:
                  $ref: '#/components/examples/ActorsListExample'
        "401":
          description: Validation error when attempting to search actors
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "500":
          description: Unable to process actors search result
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/actors/:id:
    get:
      tags:
      - actors
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get actor by ID
      operationId: getActorByID
      responses:
        "200":
          description: Successfully retrieved actor by ID
          content:
            application/json:
              examples:
                ActorExample:
                  $ref: '#/components/examples/ActorExample'
        "401":
          description: Validation error when attempting to retrieve actor
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Actor not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get ator
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []
  /api/actors/:id/images:
    get:
      tags:
      - actors
      parameters:
      - $ref: "#/components/parameters/resource_id"
      description: get actor images
      operationId: getActorImages
      responses:
        "200":
          description: Successfully retrieved actor images
          content:
            application/json:
              examples:
                ActorImagesExample:
                  $ref: '#/components/examples/ActorImagesExample'
        "401":
          description: Validation error when attempting to retrieve actor images
          content:
            application/json:
              examples:
                401Example:
                  $ref: '#/components/examples/401AccountVerificationExample'
        "404":
          description: Actor not found
          content:
            application/json:
              examples:
                404Example:
                  $ref: '#/components/examples/404ResourceNotFoundExample'
        "500":
          description: Unable to get actor images
          content:
            application/json:
              examples:
                GenericErrorExample:
                  $ref: '#/components/examples/GenericErrorExample'
      security:
      - BEARER: []

components:
  parameters:
    query_actors:
      description: |
        Popular people search criteria.

        See this website for all available queries https://developers.themoviedb.org/3/search/search-people

        Note. By default the following query parameters are set: 
        - language=en-US
        - include_adult=false
        - include_video=false

        Note. If the query is invalid, an error is returned.
      explode: true
      name: query_actors
      in: query
      required: false
      examples:
        query:
          value: "&language=en-US&include_adult=false&include_video=false"
      schema:
        type: string
      style: form
    query_tv:
      description: |
        Tv series search criteria.

        See this website for all available queries https://developers.themoviedb.org/3/discover/tv-discover

        Note. By default the following query parameters are set: 
        - language=en-US
        - include_adult=false
        - include_video=false

        Note. If the query is invalid, an error is returned.
      explode: true
      name: query_tv
      in: query
      required: false
      examples:
        query:
          value: "&language=en-US&include_adult=false&include_video=false"
      schema:
        type: string
      style: form
    query:
      description: |
        Movies search criteria.

        See this website for all available queries https://developers.themoviedb.org/3/discover/movie-discover

        Note. By default the following query parameters are set: 
        - language=en-US
        - include_adult=false
        - include_video=false

        Note. If the query is invalid, an error is returned.
      explode: true
      name: query
      in: query
      required: false
      examples:
        query:
          value: "&language=en-US&include_adult=false&include_video=false"
      schema:
        type: string
      style: form
    id:
      name: id
      description: The ID of a record
      schema:
        type: string
      in: path
      required: true
    resource_id:
      name: resource_id
      description: The ID of a TMDB record
      schema:
        type: string
      in: path
      required: true
    movie_id:
      name: movie_id
      description: The ID of a fantasy movie record
      schema:
        type: string
      in: path
      required: true
    cast_id:
      name: cast_id
      description: The ID of a fantasy movie cast record
      schema:
        type: string
      in: path
      required: true
    genre_id:
      name: genre_id
      description: The ID of a TMDB genre record
      schema:
        type: string
      in: path
      required: true
  securitySchemes:
    BEARER:
      type: http
      scheme: bearer
      bearerFormat: JWT
  examples:
    GenreExample:
      value:
        id: 6447c3eb02fae8cac719672f
        tmdbID: 12345
        name: Action
    GenreListExample:
      value:
        id: 6447c3eb02fae8cac719672f
        tmdbID: 12345
        name: Action
    FavouriteMoviesExample:
      value:
        favouriteMovies: [12345, 334565]
    FavouriteTvSeriesExample:
      value:
        favouriteTvSeries: [12345, 334565]
    FavouriteActorsExample:
      value:
        favouriteActors: [12345, 334565]
    404AccountNotFoundExample:
      value:
        "error": "account not found"
    404ResourceNotFoundExample:
      value:
        "error": "resource not found"
    401AccountAuthenticationExample:
      value:
        "error": "Unauthorised"
    AuthenticationPayloadExample:
      value:
        email: validemail@gmail.com
        password: Password1%
    AccountRequestExample:
      value:
        firstName: John
        lastName: Doe
        email: validemail@gmail.com
        password: Password1%
    FantasyMoviePayloadExample:
      value:
        title: title
        runtime: 122
        moviePoster: valid.url
        productionCompanies: sony, pixar
        genres: Western
        releaseDate: "Tue 25 Apr 2022 15:17:53 UTC"
    FantasyMovieCastPayloadExample:
      value:
        name: John Doe
        roleName: John Wick
        description: single living middle aged man taking vengeance on bad people
    FavouriteMoviesPayloadExample:
      value:
        "favouriteMovies": [640146, 868759]
    FavouriteTvSeriesPayloadExample:
      value:
        "favouriteMovies": [100088]
    AccountCreationExample:
      value:
        "id": "6447c3eb02fae8cac719672f"
        "firstName": "John"
        "lastName": "Doe"
        "email": "validemail@gmail.com"
        "password": "$2a$10$YFxmsGkV./.ENDp7.in9xO53QNicTqlkZC0I3S0TWJU6dbGC2DgAb"
        "favouriteMovies": []
        "favouriteTvSeries": []
        "favouriteActors": []
        "fantasyMovies": []
    401AccountCreationExample:
      value:
        "error": "Error: Invalid Data \"email\" is required"
    500AccountCreationExample:
      value:
        "error": "Failed to create account"
    401AccountVerificationExample:
      value:
        "error": "Failed to verify requester identity"
    GenericErrorExample:
      value:
        "error": "Failed to perform operation"
    SecurityTokenExample:
      value:
        "BEARER $2a$10$YFxmsGkV./.ENDp7.in9xO53QNicTqlkZC0I3S0TWJU6dbGC2DgAb"
    ResourceCreateBodyExample:
      value:
        "id": "6447c3eb02fae8cac719672f"
    ActorImagesExample:
      value: |
        {
            "id": 224513,
            "profiles": [
                {
                    "aspect_ratio": 0.667,
                    "height": 819,
                    "iso_639_1": null,
                    "file_path": "/3vxvsmYLTf4jnr163SUlBIw51ee.jpg",
                    "vote_average": 5.372,
                    "vote_count": 82,
                    "width": 546
                },
                {
                    "aspect_ratio": 0.667,
                    "height": 900,
                    "iso_639_1": null,
                    "file_path": "/14uxt0jH28J9zn4vNQNTae3Bmr7.jpg",
                    "vote_average": 5.348,
                    "vote_count": 159,
                    "width": 600
                },
                {
                    "aspect_ratio": 0.667,
                    "height": 840,
                    "iso_639_1": null,
                    "file_path": "/vkoSSVrGxFYvtr2uUdz99ENXF1v.jpg",
                    "vote_average": 5.334,
                    "vote_count": 42,
                    "width": 560
                }
            ]
        }
    ActorExample:
      value: |
        {
            "adult": false,
            "gender": 1,
            "id": 224513,
            "known_for": [
                {
                    "adult": false,
                    "backdrop_path": "/ilRyazdMJwN05exqhwK4tMKBYZs.jpg",
                    "genre_ids": [
                        878,
                        18
                    ],
                    "id": 335984,
                    "media_type": "movie",
                    "original_language": "en",
                    "original_title": "Blade Runner 2049",
                    "overview": "Thirty years after the events of the first film, a new blade runner, LAPD Officer K, unearths a long-buried secret that has the potential to plunge what's left of society into chaos. K's discovery leads him on a quest to find Rick Deckard, a former LAPD blade runner who has been missing for 30 years.",
                    "poster_path": "/gajva2L0rPYkEWjzgFlBXCAVBE5.jpg",
                    "release_date": "2017-10-04",
                    "title": "Blade Runner 2049",
                    "video": false,
                    "vote_average": 7.5,
                    "vote_count": 11766
                },
                {
                    "adult": false,
                    "backdrop_path": "/4HWAQu28e2yaWrtupFPGFkdNU7V.jpg",
                    "genre_ids": [
                        35,
                        80,
                        9648
                    ],
                    "id": 546554,
                    "media_type": "movie",
                    "original_language": "en",
                    "original_title": "Knives Out",
                    "overview": "When renowned crime novelist Harlan Thrombey is found dead at his estate just after his 85th birthday, the inquisitive and debonair Detective Benoit Blanc is mysteriously enlisted to investigate. From Harlan's dysfunctional family to his devoted staff, Blanc sifts through a web of red herrings and self-serving lies to uncover the truth behind Harlan's untimely death.",
                    "poster_path": "/pThyQovXQrw2m0s9x82twj48Jq4.jpg",
                    "release_date": "2019-11-27",
                    "title": "Knives Out",
                    "video": false,
                    "vote_average": 7.9,
                    "vote_count": 10621
                },
                {
                    "adult": false,
                    "backdrop_path": "/3Mnbw4gOYz5BNZB9PhZ2cyBSQum.jpg",
                    "genre_ids": [
                        35,
                        80,
                        18
                    ],
                    "id": 308266,
                    "media_type": "movie",
                    "original_language": "en",
                    "original_title": "War Dogs",
                    "overview": "Based on the true story of two young men, David Packouz and Efraim Diveroli, who won a $300 million contract from the Pentagon to arm America's allies in Afghanistan.",
                    "poster_path": "/uH9qGH5XS1iZXCSb3tgu40dxQoh.jpg",
                    "release_date": "2016-08-17",
                    "title": "War Dogs",
                    "video": false,
                    "vote_average": 6.9,
                    "vote_count": 4319
                }
            ],
            "known_for_department": "Acting",
            "name": "Ana de Armas",
            "popularity": 352.507,
            "profile_path": "/3vxvsmYLTf4jnr163SUlBIw51ee.jpg"
        }
    ActorsListExample:
      value: |
        {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "gender": 1,
                    "id": 224513,
                    "known_for": [
                        {
                            "adult": false,
                            "backdrop_path": "/ilRyazdMJwN05exqhwK4tMKBYZs.jpg",
                            "genre_ids": [
                                878,
                                18
                            ],
                            "id": 335984,
                            "media_type": "movie",
                            "original_language": "en",
                            "original_title": "Blade Runner 2049",
                            "overview": "Thirty years after the events of the first film, a new blade runner, LAPD Officer K, unearths a long-buried secret that has the potential to plunge what's left of society into chaos. K's discovery leads him on a quest to find Rick Deckard, a former LAPD blade runner who has been missing for 30 years.",
                            "poster_path": "/gajva2L0rPYkEWjzgFlBXCAVBE5.jpg",
                            "release_date": "2017-10-04",
                            "title": "Blade Runner 2049",
                            "video": false,
                            "vote_average": 7.5,
                            "vote_count": 11766
                        },
                        {
                            "adult": false,
                            "backdrop_path": "/4HWAQu28e2yaWrtupFPGFkdNU7V.jpg",
                            "genre_ids": [
                                35,
                                80,
                                9648
                            ],
                            "id": 546554,
                            "media_type": "movie",
                            "original_language": "en",
                            "original_title": "Knives Out",
                            "overview": "When renowned crime novelist Harlan Thrombey is found dead at his estate just after his 85th birthday, the inquisitive and debonair Detective Benoit Blanc is mysteriously enlisted to investigate. From Harlan's dysfunctional family to his devoted staff, Blanc sifts through a web of red herrings and self-serving lies to uncover the truth behind Harlan's untimely death.",
                            "poster_path": "/pThyQovXQrw2m0s9x82twj48Jq4.jpg",
                            "release_date": "2019-11-27",
                            "title": "Knives Out",
                            "video": false,
                            "vote_average": 7.9,
                            "vote_count": 10621
                        },
                        {
                            "adult": false,
                            "backdrop_path": "/3Mnbw4gOYz5BNZB9PhZ2cyBSQum.jpg",
                            "genre_ids": [
                                35,
                                80,
                                18
                            ],
                            "id": 308266,
                            "media_type": "movie",
                            "original_language": "en",
                            "original_title": "War Dogs",
                            "overview": "Based on the true story of two young men, David Packouz and Efraim Diveroli, who won a $300 million contract from the Pentagon to arm America's allies in Afghanistan.",
                            "poster_path": "/uH9qGH5XS1iZXCSb3tgu40dxQoh.jpg",
                            "release_date": "2016-08-17",
                            "title": "War Dogs",
                            "video": false,
                            "vote_average": 6.9,
                            "vote_count": 4319
                        }
                    ],
                    "known_for_department": "Acting",
                    "name": "Ana de Armas",
                    "popularity": 352.507,
                    "profile_path": "/3vxvsmYLTf4jnr163SUlBIw51ee.jpg"
                },
                {
                    "adult": false,
                    "gender": 2,
                    "id": 58021,
                    "known_for": [
                        {
                            "adult": false,
                            "backdrop_path": "/6UDep1cxHQqrNFhSW4ZNQLW3Alr.jpg",
                            "genre_ids": [
                                18,
                                36,
                                10749
                            ],
                            "id": 9453,
                            "media_type": "movie",
                            "original_language": "en",
                            "original_title": "Caligola",
                            "overview": "The perversion behind imperial Rome, the epic story of Rome's mad Emporer. All the details of his cruel, bizarre reign are revealed right here: His unholy sexual passion for his sister, his marriage to Rome's most infamous prostitute, his fiendishly inventive means of disposing those who would oppose him, and more.",
                            "poster_path": "/4N4l873TVreuaR4FVpvaL2gfQ0N.jpg",
                            "release_date": "1979-08-14",
                            "title": "Caligula",
                            "video": false,
                            "vote_average": 6,
                            "vote_count": 657
                        },
                        {
                            "adult": false,
                            "backdrop_path": "/iHDermFVn4DiShm5cvUK0f0rW2A.jpg",
                            "genre_ids": [
                                18,
                                10749
                            ],
                            "id": 28468,
                            "media_type": "movie",
                            "original_language": "it",
                            "original_title": "La chiave",
                            "overview": "Art professor Nino Rolfe attempts to break down his wife Teresa's conventional modesty. Noticing her affection for their daughter's fiancé, Nino instigates her sexual interest in him - setting off a chain of unexpected events and emotional complications...",
                            "poster_path": "/e6g2geNLgFzMbriH6EvSJZD78nx.jpg",
                            "release_date": "1983-10-19",
                            "title": "The Key",
                            "video": false,
                            "vote_average": 6,
                            "vote_count": 339
                        },
                        {
                            "adult": false,
                            "backdrop_path": "/9CkI4VsYF8qJWfZpPqwZnBctb3M.jpg",
                            "genre_ids": [
                                18
                            ],
                            "id": 50270,
                            "media_type": "movie",
                            "original_language": "it",
                            "original_title": "Paprika",
                            "overview": "A young country girl comes to town and works in a brothel in order to help her fiance get the money to start his own business. \"Paprika\" is the name given to her by the madam.",
                            "poster_path": "/jwlo74haG1XNmp5IdSJ5Gy3KuIm.jpg",
                            "release_date": "1991-02-13",
                            "title": "Paprika",
                            "video": false,
                            "vote_average": 7.1,
                            "vote_count": 333
                        }
                    ],
                    "known_for_department": "Directing",
                    "name": "Tinto Brass",
                    "popularity": 258.135,
                    "profile_path": "/adQ1j2FQ1FZ67hlZVhsUnALM4G4.jpg"
                }
            ]
        }

    TvSeriesImagesExample:
      value: |
        {
            "backdrops": [
                {
                    "aspect_ratio": 1.778,
                    "height": 1080,
                    "iso_639_1": "ar",
                    "file_path": "/wJmcuxa0C4AERmA9mejxm9qRYDj.jpg",
                    "vote_average": 5.312,
                    "vote_count": 1,
                    "width": 1920
                },
                {
                    "aspect_ratio": 1.778,
                    "height": 1080,
                    "iso_639_1": null,
                    "file_path": "/kMo3EtW3DhY23lbhe4TFxWBZs0e.jpg",
                    "vote_average": 5.312,
                    "vote_count": 1,
                    "width": 1920
                },
                {
                    "aspect_ratio": 1.778,
                    "height": 1080,
                    "iso_639_1": "en",
                    "file_path": "/63DJiq5uhVXwJFL4nf49r0uyJjL.jpg",
                    "vote_average": 5.246,
                    "vote_count": 2,
                    "width": 1920
                }
            ]
        }
    RecommendedTvSeriesListExample:
      value: |
        [
            {
                "adult": false,
                "backdrop_path": "/JrBiUtR2CwxZR5GMK5Z9dU7Wr4.jpg",
                "genre_ids": [
                    10765,
                    10759,
                    18
                ],
                "id": 19,
                "origin_country": [
                    "US"
                ],
                "original_language": "en",
                "original_name": "Planet of the Apes",
                "overview": "Two astronauts and a sympathetic chimp friend are fugitives in a future Earth dominated by a civilization of humanoid apes. \n\nBased on the 1968 Planet of the Apes film and its sequels, which were inspired by the novel of the same name by Pierre Boulle.",
                "popularity": 10.64,
                "poster_path": "/zxo5Vrd0oXgm9ZCz4r7Q3L8veWg.jpg",
                "first_air_date": "1974-09-13",
                "name": "Planet of the Apes",
                "vote_average": 6.862,
                "vote_count": 65
            },
            {
                "adult": false,
                "backdrop_path": "/da5qFYz4JT1d4kTwbU1Gf15TRBD.jpg",
                "genre_ids": [
                    16,
                    10765,
                    10759,
                    35
                ],
                "id": 44,
                "origin_country": [
                    "US"
                ],
                "original_language": "en",
                "original_name": "Adventures of Sonic the Hedgehog",
                "overview": "Follow the adventures of Sonic the Hedgehog, and his sidekick Tails, as they attempt to stop Dr. Robotnik and his array of robots from taking over the planet Mobius.",
                "popularity": 11.838,
                "poster_path": "/wMDixjRrrWtuOWf2La4Vb4a5QKw.jpg",
                "first_air_date": "1993-09-06",
                "name": "Adventures of Sonic the Hedgehog",
                "vote_average": 6.5,
                "vote_count": 81
            },
            {
                "adult": false,
                "backdrop_path": "/dlDynz58qyEqrd3gzxqfYB2JiUW.jpg",
                "genre_ids": [
                    18,
                    10759,
                    10765
                ],
                "id": 184,
                "origin_country": [
                    "CA",
                    "US"
                ],
                "original_language": "en",
                "original_name": "Jeremiah",
                "overview": "Jeremiah is an American television series starring Luke Perry and Malcolm-Jamal Warner that ran on the Showtime network from 2002 to 2004. The series takes place in a post-apocalyptic future where most of the adult population has been wiped out by a deadly virus.",
                "popularity": 5.847,
                "poster_path": "/yBaq79cbv8Lmhaa7ej3z6GOp9zK.jpg",
                "first_air_date": "2002-03-03",
                "name": "Jeremiah",
                "vote_average": 6.981,
                "vote_count": 53
            },
            {
                "adult": false,
                "backdrop_path": "/w6mvtiWPuzfV5lPJAXA2sQ8xqBL.jpg",
                "genre_ids": [
                    10765,
                    10759
                ],
                "id": 237,
                "origin_country": [
                    "US"
                ],
                "original_language": "en",
                "original_name": "Mortal Kombat: Conquest",
                "overview": "Kung Lao has triumphed in the Mortal Kombat tournament, defeating Shang Tsung and saving Earth Realm. Now, he must train a new generation of warriors for the next tournament. Meanwhile, an exiled Shang Tsung attempts to thwart Lao's efforts with the aid of supernatural warriors such as Scorpion and Sub-Zero.",
                "popularity": 13.118,
                "poster_path": "/tHICkzrorbw0EgTxreIyUfc1pca.jpg",
                "first_air_date": "1998-10-03",
                "name": "Mortal Kombat: Conquest",
                "vote_average": 6.93,
                "vote_count": 291
            },
            {
                "adult": false,
                "backdrop_path": "/ltuy3np1zLbzchdwOCGQj1flKlo.jpg",
                "genre_ids": [
                    10764
                ],
                "id": 86479,
                "origin_country": [],
                "original_language": "en",
                "original_name": "Ed Stafford: First Man Out",
                "overview": "Ed Stafford takes on a series of head-to-head challenges against some of the biggest names in survival, risking life, limb, and reputation along the way. Over miles of hostile terrain in Asia, Ed and his opponents will face high stakes survival challenges as they race to reach a predetermined extraction point, in a bid to prove they are top of their game and be the first man out.",
                "popularity": 7.797,
                "poster_path": "/77rXDebsD4QaEbFsBLeysFrsl9i.jpg",
                "first_air_date": "2019-01-31",
                "name": "Ed Stafford: First Man Out",
                "vote_average": 6.8,
                "vote_count": 5
            }
        ]
    TvSeriesListExample:
      value: |
        {
            "page": 1,
            "results": [
                {
                    "backdrop_path": "/wJmcuxa0C4AERmA9mejxm9qRYDj.jpg",
                    "first_air_date": "2022-06-06",
                    "genre_ids": [
                        80,
                        9648
                    ],
                    "id": 203504,
                    "name": "Aashiqana",
                    "origin_country": [
                        "IN"
                    ],
                    "original_language": "hi",
                    "original_name": "आशिकाना",
                    "overview": "A serial killer sparks the story of uptight Yashvardhan and feisty Chikki. Plagued by misunderstandings, how far do they have to go to nab the murderer?",
                    "popularity": 2636.52,
                    "poster_path": "/1skNvUMTKi9IH0Qv9rf0Piw0MPy.jpg",
                    "vote_average": 6.6,
                    "vote_count": 7
                },
                {
                    "backdrop_path": "/xGKTgJlqCkq6tAK2sOTdULh7YaX.jpg",
                    "first_air_date": "2022-10-10",
                    "genre_ids": [
                        10766,
                        18,
                        35
                    ],
                    "id": 204370,
                    "name": "The Path",
                    "origin_country": [
                        "BR"
                    ],
                    "original_language": "pt",
                    "original_name": "Travessia",
                    "overview": "After having her life course changed by a fake image and losing her childhood sweetheart to greed and power, Brisa, a strong woman, will struggle to rebuild her journey, raise her son, rediscover true love, and discover the truth about her origin.",
                    "popularity": 2577.077,
                    "poster_path": "/raDj1xSVzBenwI87arenZY6eHmz.jpg",
                    "vote_average": 5.1,
                    "vote_count": 14
                }
            ]
        }
    TvSeriesExample:
      value: |
        {
            "backdrop_path": "/wJmcuxa0C4AERmA9mejxm9qRYDj.jpg",
            "first_air_date": "2022-06-06",
            "genre_ids": [
                80,
                9648
            ],
            "id": 203504,
            "name": "Aashiqana",
            "origin_country": [
                "IN"
            ],
            "original_language": "hi",
            "original_name": "आशिकाना",
            "overview": "A serial killer sparks the story of uptight Yashvardhan and feisty Chikki. Plagued by misunderstandings, how far do they have to go to nab the murderer?",
            "popularity": 2636.52,
            "poster_path": "/1skNvUMTKi9IH0Qv9rf0Piw0MPy.jpg",
            "vote_average": 6.6,
            "vote_count": 7
        }
    MovieExample:
      value: |
        {
            "adult": false,
            "backdrop_path": "/8YFL5QQVPy3AgrEQxNYVSgiPEbe.jpg",
            "genre_ids": [
                28,
                12,
                878
            ],
            "id": 640146,
            "original_language": "en",
            "original_title": "Ant-Man and the Wasp: Quantumania",
            "overview": "Super-Hero partners Scott Lang and Hope van Dyne, along with with Hope's parents Janet van Dyne and Hank Pym, and Scott's daughter Cassie Lang, find themselves exploring the Quantum Realm, interacting with strange new creatures and embarking on an adventure that will push them beyond the limits of what they thought possible.",
            "popularity": 12579.923,
            "poster_path": "/ngl2FKBlU4fhbdsrtdom9LVLBXw.jpg",
            "release_date": "2023-02-15",
            "title": "Ant-Man and the Wasp: Quantumania",
            "video": false,
            "vote_average": 6.5,
            "vote_count": 1741
        }
    RecommendedMovieListExample:
      value: |
        [
            {
                "adult": false,
                "backdrop_path": null,
                "genre_ids": [
                    35,
                    16
                ],
                "id": 989337,
                "original_language": "en",
                "original_title": "A Family Affair",
                "overview": "Krazy Kat follows Ignatz Mouse and thinks about family as the latter takes his children out on a walk.",
                "popularity": 0.6,
                "poster_path": "/m8wRnMnwQ8X23yVF4OJ4gem7l7f.jpg",
                "release_date": "1920-10-25",
                "title": "A Family Affair",
                "video": false,
                "vote_average": 5,
                "vote_count": 1
            },
            {
                "adult": false,
                "backdrop_path": null,
                "genre_ids": [
                    28,
                    878
                ],
                "id": 38281,
                "original_language": "en",
                "original_title": "Atomic Rulers",
                "overview": "Super criminals are planning to infiltrate Earth with mass nuclear destruction! Only Starman can defend civilization by thwarting evil!",
                "popularity": 1.697,
                "poster_path": "/bL8RRjaw1DOUbgSQ25Hfc2PTGly.jpg",
                "release_date": "1965-01-01",
                "title": "Atomic Rulers",
                "video": false,
                "vote_average": 3.8,
                "vote_count": 6
            },
            {
                "adult": false,
                "backdrop_path": "/iiNSeAjAbglRJNsobusROn6y0pf.jpg",
                "genre_ids": [
                    35,
                    10749
                ],
                "id": 38303,
                "original_language": "en",
                "original_title": "You Again",
                "overview": "History -- make that high school -- may repeat itself when Marni learns that Joanna, the mean girl from her past, is set to be her sister-in-law. Before the wedding bells toll, Marni must show her brother that a tiger doesn't change its stripes. On Marni's side is her mother, while Joanna's backed by her wealthy aunt.",
                "popularity": 15.906,
                "poster_path": "/9qI5JE6yjmtakTankuDOMZ1vgEx.jpg",
                "release_date": "2010-09-24",
                "title": "You Again",
                "video": false,
                "vote_average": 6.305,
                "vote_count": 1146
            },
            {
                "adult": false,
                "backdrop_path": "/9Z09HJ4NsT0booJJYaIkaroUdRI.jpg",
                "genre_ids": [
                    35,
                    10749,
                    10751
                ],
                "id": 38317,
                "original_language": "en",
                "original_title": "Zookeeper",
                "overview": "Kindhearted Griffin Keyes is one of the best-loved caretakers at the Franklin Park Zoo, but since he is more comfortable with the animals than with females of his own species, his love life is lacking. When Griffin decides that the only way to get a girlfriend is to find a more-glamorous career, the animals panic. To keep him from leaving, they reveal their secret ability to talk and offer to teach him the rules of courtship, animal-style.",
                "popularity": 19.061,
                "poster_path": "/y3b4AYw8dr4hIKTfEAjxUxx0z8G.jpg",
                "release_date": "2011-07-06",
                "title": "Zookeeper",
                "video": false,
                "vote_average": 5.415,
                "vote_count": 1466
            },
            {
                "adult": false,
                "backdrop_path": "/9pamTKugDIa1YQD8k280au3NVKd.jpg",
                "genre_ids": [
                    80,
                    35,
                    28
                ],
                "id": 38322,
                "original_language": "en",
                "original_title": "Big Mommas: Like Father, Like Son",
                "overview": "FBI agent Malcolm Turner and his 17-year-old son, Trent, go undercover at an all-girls performing arts school after Trent witnesses a murder. Posing as Big Momma and Charmaine, they must find the murderer before he finds them.",
                "popularity": 24.303,
                "poster_path": "/n1GSxFcDaZ6lMVf21M0KloPfuhu.jpg",
                "release_date": "2011-02-16",
                "title": "Big Mommas: Like Father, Like Son",
                "video": false,
                "vote_average": 5.516,
                "vote_count": 1092
            }
        ]
    MovieListExample:
      value: |
        {
            "page": 1,
            "results": [
                {
                    "adult": false,
                    "backdrop_path": "/8YFL5QQVPy3AgrEQxNYVSgiPEbe.jpg",
                    "genre_ids": [
                        28,
                        12,
                        878
                    ],
                    "id": 640146,
                    "original_language": "en",
                    "original_title": "Ant-Man and the Wasp: Quantumania",
                    "overview": "Super-Hero partners Scott Lang and Hope van Dyne, along with with Hope's parents Janet van Dyne and Hank Pym, and Scott's daughter Cassie Lang, find themselves exploring the Quantum Realm, interacting with strange new creatures and embarking on an adventure that will push them beyond the limits of what they thought possible.",
                    "popularity": 12579.923,
                    "poster_path": "/ngl2FKBlU4fhbdsrtdom9LVLBXw.jpg",
                    "release_date": "2023-02-15",
                    "title": "Ant-Man and the Wasp: Quantumania",
                    "video": false,
                    "vote_average": 6.5,
                    "vote_count": 1741
                },
                {
                    "adult": false,
                    "backdrop_path": "/lWqjXgut48IK5f5IRbDBAoO2Epp.jpg",
                    "genre_ids": [
                        16,
                        12,
                        10751,
                        14,
                        35
                    ],
                    "id": 502356,
                    "original_language": "en",
                    "original_title": "The Super Mario Bros. Movie",
                    "overview": "While working underground to fix a water main, Brooklyn plumbers—and brothers—Mario and Luigi are transported down a mysterious pipe and wander into a magical new world. But when the brothers are separated, Mario embarks on an epic quest to find Luigi.",
                    "popularity": 10478.582,
                    "poster_path": "/qNBAXBIQlnOThrVvA6mA2B5ggV6.jpg",
                    "release_date": "2023-04-05",
                    "title": "The Super Mario Bros. Movie",
                    "video": false,
                    "vote_average": 7.5,
                    "vote_count": 1344
                }
            ],
            "total_pages": 37991,
            "total_results": 759816
        }
    MovieImagesExample:
      value: |
        {
            "backdrops": [
                {
                    "aspect_ratio": 1.778,
                    "height": 2160,
                    "iso_639_1": null,
                    "file_path": "/8YFL5QQVPy3AgrEQxNYVSgiPEbe.jpg",
                    "vote_average": 5.392,
                    "vote_count": 8,
                    "width": 3840
                },
                {
                    "aspect_ratio": 1.778,
                    "height": 2160,
                    "iso_639_1": null,
                    "file_path": "/3CxUndGhUcZdt1Zggjdb2HkLLQX.jpg",
                    "vote_average": 5.384,
                    "vote_count": 2,
                    "width": 3840
                },
                {
                    "aspect_ratio": 1.778,
                    "height": 2160,
                    "iso_639_1": "en",
                    "file_path": "/xCa7gIEAIy66S2LSaME90QJEWHm.jpg",
                    "vote_average": 5.318,
                    "vote_count": 3,
                    "width": 3840
                }
            ]
        }
    MovieReviewsExample:
      value: |
        {
            "id": 640146,
            "page": 1,
            "results": [
                {
                    "author": "rawatk",
                    "author_details": {
                        "name": "",
                        "username": "rawatk",
                        "avatar_path": null,
                        "rating": null
                    },
                    "content": "In general, the Ant-Man films have been well received by critics and audiences alike, with the films' unique blend of humor, action, and heart, as well as the performances of the cast members, widely praised. particular Paul Rudd as the titular Ant-Man So \"Ant-Man 3\" is likely to be eagerly awaited by Marvel fans and moviegoers in general.\r\n\r\nYou can find the full review at https://aarcflick.blogspot.com/2022/12/ant-man-and-wasp-quantumania-2023-movie.html",
                    "created_at": "2023-02-15T14:25:24.555Z",
                    "id": "63eceb548e8702009ec2466f",
                    "updated_at": "2023-02-15T15:39:39.059Z",
                    "url": "https://www.themoviedb.org/review/63eceb548e8702009ec2466f"
                },
                {
                    "author": "garethmb",
                    "author_details": {
                        "name": "",
                        "username": "garethmb",
                        "avatar_path": "/https://secure.gravatar.com/avatar/3593437cbd05cebe0a4ee753965a8ad1.jpg",
                        "rating": null
                    },
                    "content": "Life for Scott Lang (Paul Rudd) is good. He is basking in the recognition\r\n\r\nand fame that has come with his work with the Avengers and saving half the\r\n\r\nuniverse from Thanos and has even become a best-selling author.\r\n\r\nHe has a successful relationship with Hope (Evangeline Lilly) who has\r\ntaken her father’s company to new heights and they have managed to blend\r\ntheir personal and professional lives and enjoy a very happy life.\r\n\r\nScott does worry about his daughter Cassie (Kathryn Newton) as he lost\r\nseveral years with her during the Blip and she is an activist who has been\r\narrested for her efforts including a hysterical prank on the police with\r\nPym technology.\r\n\r\nCassie is constantly on her father for not doing more as she feels that he\r\nis more focused on the past battles with the Avengers and not the day to\r\nday struggles people are facing. Over dinner, she tells Hope and her dad as\r\nwell as Hank (Michael Douglas), and Janet (Michelle Pfeiffer), whom she\r\nstudied Hank’s journals while they were in the Blip and has developed a\r\nQuantum beacon which can map the Quantum Realm without having to venture\r\nto the sub-atomic relay where until recently nobody had been able to\r\nreturn from.\r\n\r\nThis news sends Janet into a panic during a demonstration and the four are\r\nsoon sucked into the realm and discover a diverse and thriving ecosystem\r\nas well as an abundance of strange and dangerous creatures.\r\n\r\nJanet is clearly hiding something and is frantic that they must leave but\r\ntheir party has been scattered and they soon learn that she fears and\r\nindividual known as Kang (Jonathan Majors).\r\nWhile she was trapped in the realm for thirty years, Janet encountered\r\nKing and helped him regain his power source but in doing so, learned he\r\nwas a banished conquerer who can manipulate time, space, and the\r\nmultiverse.\r\n\r\nHer actions to trap Kang and lead a resistance to the vast empire he\r\ncreated has set the stage as Janet has now returned to see what has\r\ndeveloped and Kang will stop at nothing to regain his power source to\r\nescape and wreck his wrath on trillions.\r\n\r\nNaturally, it is up to Scott, Hope, and the team to find a way to fight the\r\nevil and powerful Kang to save the day.\r\n\r\nThe film is a darker tale than people might expect from an Ant-man movie\r\nbut in kicking off Phase 5 of the Marvel Cinematic Universe, the movie is\r\na visual splendor filled with amazing visuals, landscapes, and characters.\r\n\r\nThe film takes a bit of time to get to the action but when it arrives it\r\ndelivers and the performance of Majors as Kang is captivating it will\r\nbe interesting to see where the storyline evolves over the next series of\r\nfilms leading up to “The Avengers: The Kang Dynasty” and beyond.\r\n\r\n“Ant-man and the Wasp: Quantumania may not break loads of new ground in\r\nterms of a Marvel film but Director Peyton Reed knows the characters well\r\nand delivers a story that should resonate with the fans and the strong\r\ncast and addition of Majors along with the great visuals make this\r\nanother winner for Marvel.\r\n\r\n4 stars out of 5",
                    "created_at": "2023-02-16T01:33:54.605Z",
                    "id": "63ed8802699fb7009e3dd88b",
                    "updated_at": "2023-02-16T01:33:54.695Z",
                    "url": "https://www.themoviedb.org/review/63ed8802699fb7009e3dd88b"
                }
            ]
        }

  schemas:
    SecurityToken:
      - type: object
        properties:
          BEARER:
            type: string
    GenericError:
      - type: object
        properties:
          error:
            type: string
    FavouriteTmdbResources:
      - type: array
        items:
          type: integer
    ResourceCreateBody:
      - type: object
        properties:
          id:
            description: Resource id
            type: integer
    AuthenticationPayload:
      - type: object
        properties:
          email:
            description: Account email. Has to have valid email address format
            type: string
          password:
            description: Account password. Has to have length between 7 and 20 characters (both incl). At least one special character, lowercase and uppercase letter and a digit
            type: string
    AccountVerificationError:
      - type: string
        properties:
          error:
            type: string
    GenreList:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/components/schemas/Genre"
    Genre:
      - type: object
        properties:
          _id:
            description: Genre unique identifier (generated by repository, e.g. mongo database)
            type: integer
          tmdbID:
            description: TMDB resource ID
            type: integer
          name:
            description: Name of the Genre
            type: string
    AccountList:
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: "#/components/schemas/Account"
    Account:
      - type: object
        required:
          - id
          - firstName
          - lastName
          - email
          - password
        properties:
          id:
            description: Account unique identifier (generated by repository, e.g. mongo database)
            type: string
          firstName:
            description: Account first name. Has to have length between 1 and 30 characters (both incl)
            type: string
          lastName:
            description: Account last name. Has to have length between 1 and 30 characters (both incl)
            type: string
          email:
            description: Account email. Has to have valid email address format
            type: string
          password:
            description: Account password. Has to have length between 7 and 20 characters (both incl). At least one special character, lowercase and uppercase letter and a digit
            type: string
          favouriteMovies:
            description: array of TMDB movie IDs 
            type: array
            items:
              type: integer
          favouriteTvSeries:
            description: array of TMDB tv series IDs 
            type: array
            items:
              type: integer
          favouriteActors:
            description: array of TMDB people's IDs 
            type: array
            items:
              type: integer
          fantasyMovies:
            description: collection of custom fantasy movies
            type: array
            items:
              $ref: "#/components/schemas/FantasyMovie"
    FantasyMovie:
      - type: object
        required:
          - _id
          - title
          - runtime
          - moviePoster
          - productionCompanies
          - genres
          - releaseDate
        properties:
          _id:
            description: FantasyMovie unique identifier (generated by repository, e.g. mongo database)
            type: string
          title:
            description: FantasyMovie title
            type: string
          runtime:
            description: FantasyMovie runtime in minutes (between 1 and 600 - both incl)
            type: integer
          moviePoster:
            description: FantasyMovie poster url
            type: string
          productionCompanies:
            type: array
            description: array of FantasyMovie production companies
            items:
              type: string
          genres:
            type: array
            description: array of FantasyMovie genres
            items:
              type: string
          releaseDate:
            type: string
            description: valid string format release date of the FantasyMovie
          cast:
            description: collection of cast of the FantasyMovie
            type: array
            items:
              $ref: "#/components/schemas/FantasyMovieCast"
    FantasyMovieCast:
      - type: object
        required:
          - _id
          - name
          - roleName
          - description
        properties:
          _id:
            description: FantasyMovieCast unique identifier (generated by repository, e.g. mongo database)
            type: string
          name:
            description: name of a person of the FantasyMovieCast
            type: string
          roleName:
            description: role name of a person of the FantasyMovieCast
            type: string
          description:
            description: FantasyMovieCast description
            type: string
    FavouriteMoviesPayload:
      description: array of favourite movies IDs
      required:
        - favouriteMovies
      properties:
        favouriteMovies:
          description: list of favourite movies TMDB ids
          type: array
          items:
            type: integer
    AccountPayload:
      description: Schema for the request body sent to /api/accounts POST when creating an account
      required:
        - firstName
        - lastName
        - email
        - password
      type: object
      properties:
        firstName:
          description: Account first name. Has to have length between 1 and 30 characters (both incl)
          type: string
        lastName:
          description: Account last name. Has to have length between 1 and 30 characters (both incl)
          type: string
        email:
          description: Account email. Has to have valid email address format
          type: string
        password:
          description: Account password. Has to have length between 7 and 20 characters (both incl). At least one special character, lowercase and uppercase letter and a digit
          type: string
    FantasyMoviePayload:
      description: Schema for the request body sent to /api/accounts/{id}/fantasy_movies POST when creating a fantasy movie
      type: object
      required:
        - title
        - runtime
        - moviePoster
        - productionCompanies
        - genres
        - releaseDate
      properties:
        title:
          description: FantasyMovie title
          type: string
        runtime:
          description: FantasyMovie runtime in minutes (between 1 and 600 - both incl)
          type: integer
        moviePoster:
          description: FantasyMovie poster url
          type: string
        productionCompanies:
          type: array
          description: array of FantasyMovie production companies
          items:
            type: string
        genres:
          type: array
          description: array of FantasyMovie genres
          items:
            type: string
        releaseDate:
          type: string
          description: valid string format release date of the FantasyMovie
    FantasyMovieCastPayload:
      description: Schema for the request body sent to /api/accounts/{id}/fantasy_movies/{movie_id}/cast when adding a cast member to fantasy movie
      type: object
      required:
        - name
        - roleName
        - description
      properties:
        name:
          description: name of a person of the FantasyMovieCast
          type: string
        roleName:
          description: role name of a person of the FantasyMovieCast
          type: string
        description:
          description: FantasyMovieCast description
          type: string
