{
	"info": {
		"_postman_id": "8da11c09-9de5-4276-a759-3cb9f9288a70",
		"name": "Movies API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1103326"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Create new account",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}'))",
									"pm.collectionVariables.set(\"lastName\",pm.variables.replaceIn('{{$randomLastName}}'))",
									"pm.collectionVariables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}').toLowerCase())",
									"pm.collectionVariables.set(\"password\",\"Password1%\")"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add Account: Successful Response\",()=>pm.response.to.have.status(201))",
									"const jsonData = pm.response.json();",
									"pm.test(\"Add Account: Response Object contains correct properties\",()=>{",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"    pm.expect(jsonData.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));",
									"    pm.expect(jsonData.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));",
									"    pm.expect(jsonData.email).to.eql(pm.collectionVariables.get(\"email\").toLowerCase());",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Security Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  pm.test(\"Get Token: Successful Response\",()=>pm.response.to.have.status(200))",
									"  const jsonData = pm.response.json();",
									"  pm.test(\"Get Token: Response Object contains token\",()=>{",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.expect(jsonData.token).to.be.a(\"string\");",
									"  })",
									"  pm.test(\"Get Token: Response contains correctly formatted token\",()=>{",
									"    const splitArray = jsonData.token.split(\" \")",
									"    pm.expect(splitArray[0].toLowerCase()).to.eql(\"bearer\");",
									"    pm.expect(splitArray[1]).length.to.be.greaterThan(25);",
									"    pm.collectionVariables.set(\"authToken\",splitArray[1]);",
									"  })"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email}}\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/security/token",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"security",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Accounts: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Accounts: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Accounts: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Accounts: Test accounts data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"  anAccount=jsonData[0]",
									"  pm.expect(anAccount).to.have.property(\"id\");",
									"  pm.expect(anAccount).to.have.property(\"firstName\");",
									"  pm.expect(anAccount).to.have.property(\"lastName\");",
									"  pm.expect(anAccount).to.have.property(\"email\");",
									"  pm.expect(anAccount).to.have.property(\"password\");",
									"  pm.collectionVariables.set(\"accountId\",anAccount.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account by ID: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account by ID: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Account: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Account: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Account: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Account: Test account data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  anAccount=jsonData",
									"  pm.expect(anAccount).to.have.property(\"id\");",
									"  pm.expect(anAccount).to.have.property(\"firstName\");",
									"  pm.expect(anAccount).to.have.property(\"lastName\");",
									"  pm.expect(anAccount).to.have.property(\"email\");",
									"  pm.expect(anAccount).to.have.property(\"password\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Account by ID: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/dk39dk39dk39",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"dk39dk39dk39"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite movies: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Accounts favourite movies: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Accounts favourite movies: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Accounts favourite movies: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Accounts favourite movies: Test account data of response\", () => {",
									"  favouriteMovies=jsonData",
									"  pm.expect(favouriteMovies).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite movies: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite movies: account not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/dk39dk39dk39/favourite_movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"dk39dk39dk39",
								"favourite_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite movies: invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"640146\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite movies: invalid id format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite movies: valid format and token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add to Accounts favourite movies: Successful Response\",()=>pm.response.to.have.status(200))",
									"const jsonData = pm.response.json();",
									"pm.test(\"Add Account: Response Object contains correct properties\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"Object\");",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"    pm.collectionVariables.set(\"favouriteMovieId\",jsonData.favouriteMovies[0]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"640146\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete from Accounts favourite movies: invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies/{{favouriteMovieId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies",
								"{{favouriteMovieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete from Accounts favourite movies: success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete from Accounts favourite movies: Successful Response\",()=>pm.response.to.have.status(200))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_movies/{{favouriteMovieId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_movies",
								"{{favouriteMovieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite tv series: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite tv series: account not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/dk39dk39dk39/favourite_tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"dk39dk39dk39",
								"favourite_tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite tv series: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Accounts favourite tv series: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Accounts favourite tv series: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Accounts favourite tv series: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Accounts favourite tv series: Test account data of response\", () => {",
									"  favouriteTv=jsonData",
									"  pm.expect(favouriteTv).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite tv series: valid format and token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add to Accounts favourite movies: Successful Response\",()=>pm.response.to.have.status(200))",
									"const jsonData = pm.response.json();",
									"pm.test(\"Add Account: Response Object contains correct properties\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"Object\");",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"    pm.collectionVariables.set(\"favouriteTvId\",jsonData.favouriteTvSeries[0]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"82856\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite tv series: invalid id format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite tv series: invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"640146\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete from Accounts favourite tv series: invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv/{{favouriteTvId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv",
								"{{favouriteTvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete from Accounts favourite tv series: success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete from Account favourite movies: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_tv/{{favouriteTvId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_tv",
								"{{favouriteTvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite actors: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Accounts favourite actors: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Accounts favourite actors: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Accounts favourite actors: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Accounts favourite actors: Test account data of response\", () => {",
									"  favouriteActors=jsonData",
									"  pm.expect(favouriteActors).to.be.an(\"array\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite actors: account not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/dk39dk39dk39/favourite_actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"dk39dk39dk39",
								"favourite_actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts favourite actors: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite actors: valid format and token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Add to Accounts favourite actors: Successful Response\",()=>pm.response.to.have.status(200))",
									"const jsonData = pm.response.json();",
									"pm.test(\"Add Account: Response Object contains correct properties\",()=>{",
									"    pm.expect(jsonData).to.be.an(\"Object\");",
									"    pm.expect(jsonData).to.have.property(\"id\");",
									"    pm.expect(jsonData.id).to.be.a(\"string\");",
									"    pm.collectionVariables.set(\"favouriteActorId\",jsonData.favouriteMovies[0]);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"640146\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite actors: invalid id format",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add to Accounts favourite actors: invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"640146\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete from Accounts favourite actors: success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete from Accounts favourite actors: Successful Response\",()=>pm.response.to.have.status(200))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors/{{favouriteActorId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors",
								"{{favouriteActorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete from Accounts favourite actors: invalid token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/accounts/{{accountId}}/favourite_actors/{{favouriteActorId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"accounts",
								"{{accountId}}",
								"favourite_actors",
								"{{favouriteActorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Actors",
			"item": [
				{
					"name": "Get Actors: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Actors: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Actors: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Actors: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Actors: Test actors data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  anActor=jsonData.results[0]",
									"  pm.expect(anActor).to.have.property(\"id\");",
									"  pm.expect(anActor).to.have.property(\"name\");",
									"  pm.collectionVariables.set(\"actorId\",anActor.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actors: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Actors: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Search Actors: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Search Actors: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Search Actors: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Search Actors: Test actors data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  anActor=jsonData.results[0]",
									"  pm.expect(anActor).to.have.property(\"id\");",
									"  pm.expect(anActor).to.have.property(\"name\");",
									"  pm.collectionVariables.set(\"actorId\",anActor.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/search?query=\"jason\"",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "\"jason\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Actors: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/search?query=\"jason\"",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "\"jason\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor by ID: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/{{actorId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor by ID: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Actor: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Actor: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Actor: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Actor: Test actor data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  anActor=jsonData",
									"  pm.expect(anActor).to.have.property(\"id\");",
									"  pm.expect(anActor).to.have.property(\"name\");",
									"  pm.expect(anActor).to.have.property(\"gender\");",
									"  pm.expect(anActor).to.have.property(\"biography\");",
									"  pm.expect(anActor).to.have.property(\"also_known_as\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/{{actorId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor by ID: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/9999999",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor images: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Actor images: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Actor images: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Actor images: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Actor images: Test actor images data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  anActor=jsonData.profiles[0]",
									"  pm.expect(anActor).to.have.property(\"aspect_ratio\");",
									"  pm.expect(anActor).to.have.property(\"file_path\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/{{actorId}}/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"{{actorId}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor images: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/{{movieId}}/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"{{movieId}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Actor images: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403, 404]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/actors/9999999/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"actors",
								"9999999",
								"images"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Genres",
			"item": [
				{
					"name": "Get Genres: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Genres: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Genres: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Genres: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"genres\",jsonData)",
									"",
									"pm.test(\"Get Genres: Test genres data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"array\");",
									"  pm.expect(jsonData).to.be.an(\"array\").length.lessThan(21);",
									"  aGenre=jsonData[0]",
									"  pm.expect(aGenre).to.have.property(\"id\");",
									"  pm.expect(aGenre).to.have.property(\"tmdbID\");",
									"  pm.expect(aGenre).to.have.property(\"name\");",
									"  pm.collectionVariables.set(\"genre\",aGenre);",
									"  pm.collectionVariables.set(\"genreId\",aGenre.tmdbID);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/genres",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Genres: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/genres",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"genres"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Genre by ID: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/genres/{{genreId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Genre by ID: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Genre: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Genre: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Genre: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Genre: Test genre data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  aGenre=jsonData",
									"  pm.expect(aGenre).to.have.property(\"id\");",
									"  pm.expect(aGenre).to.have.property(\"tmdbID\");",
									"  pm.expect(aGenre).to.have.property(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/genres/{{genreId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"genres",
								"{{genreId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Get Movies: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Movies: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Movies: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Movies: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Movies: Test movie data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  aMovie=jsonData.results[0]",
									"  pm.expect(aMovie).to.have.property(\"id\");",
									"  pm.expect(aMovie).to.have.property(\"title\");",
									"  pm.collectionVariables.set(\"movieId\",aMovie.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movies: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Upcoming Movies: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/upcoming",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"upcoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Upcoming Movies: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Upcoming Movies: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Upcoming Movies: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Upcoming Movies: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Upcoming Movies: Test movie data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  aMovie=jsonData.results[0]",
									"  pm.expect(aMovie).to.have.property(\"id\");",
									"  pm.expect(aMovie).to.have.property(\"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/upcoming",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"upcoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie by ID: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie by ID: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Movie: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Movie: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Movie: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Movie: Test movie data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  aMovie=jsonData",
									"  pm.expect(aMovie).to.have.property(\"id\");",
									"  pm.expect(aMovie).to.have.property(\"original_title\");",
									"  pm.expect(aMovie).to.have.property(\"overview\");",
									"  pm.expect(aMovie).to.have.property(\"release_date\");",
									"  pm.expect(aMovie).to.have.property(\"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie by ID: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/9999999",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movies similar: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403, 404]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/9999999/similar",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"9999999",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movies similar: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Movies similar: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Movies similar: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Movies similar: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Movies similar: Test similar movie data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  aMovie=jsonData.results[0]",
									"  pm.expect(aMovie).to.have.property(\"id\");",
									"  pm.expect(aMovie).to.have.property(\"title\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}/similar",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movies similar: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}/similar",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie images: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Movie images: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Movie images: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Movie images: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Movie images: Test movie images data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  aMovie=jsonData.backdrops[0]",
									"  pm.expect(aMovie).to.have.property(\"aspect_ratio\");",
									"  pm.expect(aMovie).to.have.property(\"file_path\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie images: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie images: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403, 404]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/9999999/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"9999999",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie reviews: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403, 404]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/9999999/reviews",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"9999999",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie reviews: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Movie reviews: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Movie reviews: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Movie reviews: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Movie reviews: Test movie reviews data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  aReview=jsonData.results[0]",
									"  pm.expect(aReview).to.have.property(\"author\");",
									"  pm.expect(aReview).to.have.property(\"content\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}/reviews",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"reviews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Movie reviews: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/movies/{{movieId}}/reviews",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"movies",
								"{{movieId}}",
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tv Series",
			"item": [
				{
					"name": "Get Tv Series: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Tv Series: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Tv Series: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Tv Series: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Tv Series: Test tv series data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  aTv=jsonData.results[0]",
									"  pm.expect(aTv).to.have.property(\"id\");",
									"  pm.expect(aTv).to.have.property(\"name\");",
									"  pm.collectionVariables.set(\"tvId\",aTv.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series by ID: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"  ",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/{{tvId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"{{tvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series by ID: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Tv Series: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Tv Series: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Tv Series: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Tv Series: Test Tv Series data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  aTv=jsonData",
									"  pm.expect(aTv).to.have.property(\"id\");",
									"  pm.expect(aTv).to.have.property(\"name\");",
									"  pm.expect(aTv).to.have.property(\"overview\");",
									"  pm.expect(aTv).to.have.property(\"first_air_date\");",
									"  pm.expect(aTv).to.have.property(\"original_name\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/{{tvId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"{{tvId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series by ID: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.equal(404);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/9999999",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"9999999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series similar: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403, 404]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/9999999/similar",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"9999999",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series similar: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Tv Series similar: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Tv Series similar: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Tv Series similar: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Tv Series similar: Test similar movie data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  pm.expect(jsonData.page).to.be.a(\"number\");",
									"  pm.expect(jsonData.results).to.be.an(\"array\").length.lessThan(21);",
									"  aTv=jsonData.results[0]",
									"  pm.expect(aTv).to.have.property(\"id\");",
									"  pm.expect(aTv).to.have.property(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/100088/similar",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"100088",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series similar: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/{{tvId}}/similar",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"{{tvId}}",
								"similar"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series images: valid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Tv Series images: Status code is 200\",  ()=> {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Get Tv Series images: Content-Type is correct\", function () {",
									"   pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
									"});",
									"",
									"pm.test(\"Get Tv Series images: Response time is less than 400ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Get Tv Series images: Test movie images data of response\", () => {",
									"  pm.expect(jsonData).to.be.an(\"object\");",
									"  aTv=jsonData.backdrops[0]",
									"  pm.expect(aTv).to.have.property(\"aspect_ratio\");",
									"  pm.expect(aTv).to.have.property(\"file_path\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/{{tvId}}/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"{{tvId}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series images: invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Invalid Token: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bad_token",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/{{tvId}}/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"{{tvId}}",
								"images"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tv Series images: not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  const jsonData = pm.response.json();",
									"",
									"  pm.test(\"Not Found: Correct Response\", function () {",
									"     pm.expect(pm.response.code).to.be.oneOf([500,401,403, 404]);",
									"     pm.expect(jsonData).to.be.an(\"object\");",
									"     pm.expect(jsonData).to.have.property(\"error\");",
									"  });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/tv/9999999/images",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"tv",
								"9999999",
								"images"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "firstName",
			"value": "John",
			"type": "string"
		},
		{
			"key": "lastName",
			"value": "Doe",
			"type": "string"
		},
		{
			"key": "email",
			"value": "john@doe.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "Password1%",
			"type": "string"
		},
		{
			"key": "jsonData",
			"value": ""
		},
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "genres",
			"value": ""
		},
		{
			"key": "genre",
			"value": ""
		},
		{
			"key": "genreId",
			"value": ""
		},
		{
			"key": "movieId",
			"value": ""
		},
		{
			"key": "actorId",
			"value": ""
		},
		{
			"key": "tvId",
			"value": ""
		},
		{
			"key": "accountId",
			"value": ""
		},
		{
			"key": "updatedLastName",
			"value": ""
		},
		{
			"key": "favouriteMovieId",
			"value": ""
		},
		{
			"key": "favouriteTvId",
			"value": ""
		},
		{
			"key": "favouriteActorId",
			"value": ""
		}
	]
}